@using Common
@inject HttpUtil _httpUtil
@using System.Runtime.InteropServices
@inherits LayoutComponentBase
@inject ITelerikStringLocalizer L
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@* @Body and other code will be present here depending on your project *@

@inject ConfigUtil _configUtil

<TelerikRootComponent>
    <div class="header">
        <div class="nav-container">
            <div class="menu-button">
                <TelerikButton Icon="menu" OnClick="@ToggleMenuDrawer" />
            </div>
            <div class="title">
                <h1>.NET 6 Framework</h1>
            </div>
            <div class="information div-container">
                @if (@_RuntimeInfo?.Environment != "Production") {
                    <label>@_RuntimeInfo?.Environment</label>
                }
            </div>
            <div class="information div-container">
                <label>(@_RuntimeInfo?.Build)</label>
            </div>
            <div class="information div-container">
                <label>
                    @if (_configUtil.IsEnableAAD) {
                      <AuthorizeView>
                        <Authorized>
                            @context.User.Identity?.Name
                        </Authorized>
                        <NotAuthorized>
                            <a href="authentication/login">Log in</a>
                        </NotAuthorized>
                        </AuthorizeView>
                    } else {
                        @_RuntimeInfo?.User
                    }

                </label>
            </div>
            <div class="settings">
                <TelerikButton Icon="gear" OnClick="@GoToRuntimeInfo" />
            </div>
        </div>
    </div>
    <TelerikDrawer @ref="MenuDrawer"
                   Expanded="@Expanded"
                   ExpandedChanged="((bool newValue) => ExpandedChangedHandler(newValue))"
                   Width="280px" Data="DrawerMenu.MenuItems" Mode="DrawerMode.Push" Position="DrawerPosition.Left">
        <Template>
            <DrawTemplate Data="context"></DrawTemplate>
        </Template>
        <DrawerContent>
            <div class="contentbody">
                @Body
            </div>
        </DrawerContent>
    </TelerikDrawer>
</TelerikRootComponent>

@code {
    private RuntimeInfo _RuntimeInfo;
    bool Expanded { get; set; }
    TelerikDrawer<DrawerItem> MenuDrawer { get; set; }
    protected override async Task OnInitializedAsync() {
        try {
            await SetDrawerState();
            _RuntimeInfo = await _httpUtil.GetFromJsonAsync<RuntimeInfo>("RuntimeInfo");
            if (_RuntimeInfo.SQLConnection == null) { _RuntimeInfo.SQLConnection = "N/A"; }
            if (_RuntimeInfo.User == null) { _RuntimeInfo.User = "N/A"; }
        } catch (AccessTokenNotAvailableException exception) {
           NavigationManager.NavigateTo("authentication/login");
        }
    }
    #region Menu Drawer
    async Task SetDrawerState() {
        var hasKey = await LocalStorage.ContainKeyAsync("drawerState");
        if (hasKey) {
            Expanded = await LocalStorage.GetItemAsync<bool>("drawerState");
        } else {
            Expanded = true;
        }
    }
    async Task ToggleMenuDrawer() {
        if (Expanded) {
            await MenuDrawer.CollapseAsync();
        } else {
            await MenuDrawer.ExpandAsync();
        }
    }
    async Task ExpandedChangedHandler(bool value) {
        Expanded = value;
        await LocalStorage.SetItemAsync("drawerState", value);
    }
    async Task GoToRuntimeInfo() {
        NavigationManager.NavigateTo("runtimeinfo");
    }
    #endregion
}
